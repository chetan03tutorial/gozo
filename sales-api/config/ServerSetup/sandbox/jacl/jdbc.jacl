source ./proc.jacl

#--------------------------------------------------------------
# Create JDBC Driver and Data Source
# Author: Jesper Madsen
#--------------------------------------------------------------

#--------------------------------------------------------------
# Main
#--------------------------------------------------------------

#--------------------------------------------------------------
# load input.props file
#--------------------------------------------------------------
set propFile input.props
set props   [loadProperties $propFile]

#get props
set nodeName    [$props getProperty was.node.name]
set srvName     [$props getProperty srv.name]
set earPath     [$props getProperty ear.path]
set dbUser      [$props getProperty DB_USER_NAME]
set dbPwd       [$props getProperty DB_PASSWORD]
set dbJ2CAlias  [$props getProperty db.alias]
set dbType      [$props getProperty DB_TYPE]
set dbName      [$props getProperty DB_NAME]
set dbPort      [$props getProperty server.db.port]
set dbServer    [$props getProperty DB_NODE]
set noXAName    [$props getProperty db.no.xa]
set attXAName   [$props getProperty db.xa]

set server [$AdminConfig getid "/Node:$nodeName/Server:$srvName/"]

if { $dbType == "db2" } {

    set j2eeAttr [subst {{name databaseName} {type java.lang.String} {value $dbName}}] 
    set j2eeAttrTrans [subst {{name driverType} {type java.lang.Integer} {value 2}}]
    set implclattr "com.ibm.db2.jcc.DB2ConnectionPoolDataSource"
    set descNoXA "DB2 Universal JDBC Driver Provider"
    set dsHelper "com.ibm.websphere.rsadapter.DB2UniversalDataStoreHelper"
    set xaimplclattr "com.ibm.db2.jcc.DB2XADataSource"
    set descXA "DB2 Universal JDBC Driver Provider (XA)"
        set dbDrvPath   "\${DB2_JDBC_DRIVER_PATH}"
        set jccJarFile     $dbDrvPath/[$props getProperty db2.jcc.jar]
        set jccLicJarFile  $dbDrvPath/[$props getProperty db2.jcc.lic.jar]
        set jarFile     [subst {$jccJarFile;$jccLicJarFile}]
        set vmDesc  "The directory that contains the DB2 Universal JDBC Driver."
        set dbVM    "DB2_JDBC_DRIVER_PATH"
        set vmValue     [$props getProperty db2.client.location]    
    
}

if { $dbType == "oracle" } {
    set urlattr "jdbc:oracle:thin:@$dbServer:$dbPort:$dbName"
    set j2eeAttr [subst {{name URL} {type java.lang.String} {value $urlattr}}]
    set j2eeAttrTrans [subst {{name transactionBranchesLooselyCoupled} {type java.lang.Boolean} {value true}}]
    set implclattr "oracle.jdbc.pool.OracleConnectionPoolDataSource"
    set descNoXA "Oracle JDBC Driver No XA"
    set dsHelper "com.ibm.websphere.rsadapter.Oracle10gDataStoreHelper"
    set xaimplclattr "oracle.jdbc.xa.client.OracleXADataSource"
    set descXA "Oracle JDBC Driver with XA"
    set dbDrvPath   "\${ORACLE_JDBC_DRIVER_PATH}"
        set jarFile     $dbDrvPath/[$props getProperty oracle.jar.file]
        set vmDesc  "The directory that contains the Oracle thin or oci8 JDBC Driver."
        set dbVM    "ORACLE_JDBC_DRIVER_PATH"
        set vmValue     [$props getProperty oracle.zip.location]   
}

#Update Variable Map of ORACLE_JDBC_DRIVER_PATH or DB2_JDBC_DRIVER_PATH at node level

set vMap [$AdminConfig getid /Node:$nodeName/VariableMap:/]
set vSEntry [$AdminConfig list VariableSubstitutionEntry $vMap]

foreach listSEntry $vSEntry {
    set symName [$AdminConfig showAttribute $listSEntry symbolicName]

    if { $symName == $dbVM } {
        $AdminConfig remove $listSEntry
        $AdminConfig modify $vMap [subst {{entries {{{symbolicName $symName} {value {$vmValue}} {description {$vmDesc}}}}}} ]
        break
    }
}

# Get the cell name to which this node belong too.
set cellList [$AdminConfig list Cell]
set cname [$AdminConfig showAttribute $cellList name]

set dbJ2CAliasFound "0"
set j2cDatas [$AdminConfig list JAASAuthData]

proc deleteJAAS {jaasAlias} {
global AdminConfig
set j2cDatas [$AdminConfig list JAASAuthData]
foreach j2cData $j2cDatas {
    set aliasName [$AdminConfig showAttribute $j2cData alias]
        if { $jaasAlias == $aliasName } {
            puts "Deleting $jaasAlias"
            $AdminConfig remove $j2cData
            puts "Deleted $jaasAlias"
            break
       }
}
}

deleteJAAS $dbJ2CAlias

#if DB J2C alias not found then create it.

set cell [$AdminControl getCell]
set sec  [$AdminConfig getid /Cell:$cell/Security:/]


    #---------------------------------------------------------------------------
    # Create a Database JAASAuthData object for component-managed authentication
    #---------------------------------------------------------------------------
    puts "Creating Database JAASAuthData - $dbJ2CAlias"

    set alias_attr    [list alias $dbJ2CAlias]
    set desc_attr     [list description "Authentication Data for $dbJ2CAlias Database"]
    set userid_attr   [list userId $dbUser]
    set password_attr [list password $dbPwd]
    set attrs [list $alias_attr $desc_attr $userid_attr $password_attr]

    set authdata [$AdminConfig create JAASAuthData $sec $attrs]
    puts "Success creating Database JAASAuthData - $dbJ2CAlias"

#--------------------------------------------------------------
# Common Properties
#--------------------------------------------------------------

set rsadapter "WebSphere Relational Resource Adapter(cells/$cname/nodes/$nodeName/servers/$srvName|resources.xml#builtin_rra)"
set jaasAttrs [subst {{statementCacheSize 10} {datasourceHelperClassname $dsHelper} {relationalResourceAdapter "$rsadapter"} {authDataAlias  $dbJ2CAlias}}]
#Set the auth mapping properties
set authDataAliasList       [list authDataAlias      $dbJ2CAlias ]
set mappingConfigAliasList  [list mappingConfigAlias DefaultPrincipalMapping ]
set mappingList         [list $authDataAliasList $mappingConfigAliasList]

puts "Configuring JDBC Drivers for $dbType database."
puts "-------------------------------------------"

#--------------------------------------------------------------
# Delete JDBC Driver, if exists
#--------------------------------------------------------------
proc deleteJDBC {jdbcName} {

    global AdminConfig
    set jdbcProv [$AdminConfig getid "/JDBCProvider:$jdbcName/"]
    if { [string length $jdbcProv] > 0 } {
        puts "Deleting $jdbcName"
        $AdminConfig remove $jdbcProv
        puts "Deleted $jdbcName"
}
}

deleteJDBC $attXAName

puts "-------------------------------------------"

#---------------------------------------------------------------------------
# Create JDBC Driver (XA)  
#---------------------------------------------------------------------------

set attXAJndiName "jdbc/$attXAName"

puts "Configuring JDBC Driver - $attXAName"

puts "Creating JDBC Driver."
set drvName [subst {{classpath {$jarFile}} {implementationClassName $xaimplclattr} {name $attXAName} {description {$descXA}} {xa "true"} }]
set jdbcXaProvider [$AdminConfig create JDBCProvider $server $drvName]
puts "Success creating JDBC Driver."

puts "Creating Datasource."
set jndiXaAttrs [subst {{name $attXAName} {jndiName $attXAJndiName}}]
set dsXa [$AdminConfig create DataSource $jdbcXaProvider  $jndiXaAttrs]
puts "Success creating Datasource."

$AdminConfig modify $dsXa $jaasAttrs

puts "Creating Connection Pool."
$AdminConfig create ConnectionPool $dsXa {{connectionTimeout 1000} {maxConnections 50} {minConnections 25} {agedTimeout 1000} {reapTime 2000} {unusedTimeout 3000} }
puts "Success creating Connection Pool."

puts "Creating Resource Properties."
set propSetXa [$AdminConfig create J2EEResourcePropertySet $dsXa {}]
$AdminConfig create J2EEResourceProperty $propSetXa $j2eeAttr
$AdminConfig create J2EEResourceProperty $propSetXa $j2eeAttrTrans
puts "Success creating Resource Properties."

$AdminConfig create MappingModule $dsXa $mappingList

$AdminConfig save

puts "Complete configuring JDBC Driver - $attXAName"

puts "-------------------------------------------"
puts "Task Completed..."